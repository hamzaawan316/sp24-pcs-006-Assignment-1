# -*- coding: utf-8 -*-
"""SP24-PCS-006-Assignment001.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1htnkpENYlHwxa2pfi-c-4cALYXnddckX
"""

#importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from keras.models import Sequential

# Task 1.1: Create a list 'nums' and append cubes of the list to 'cubes'
nums = [3, 5, 7, 8, 12]  # Given list
cubes = []  # Empty list to store cubes

# Loop through nums and append cubes to the cubes list
for num in nums:
    cubes.append(num ** 3)  # Cubing the number and appending

# Print the cubes list
print("List of cubes:", cubes)

# Task 1.2: Create an empty dictionary and add key-value pairs
animal_legs = {}  # Empty dictionary

# Adding data to the dictionary
animal_legs['parrot'] = 2
animal_legs['goat'] = 4
animal_legs['spider'] = 8
animal_legs['crab'] = 10

# Print the dictionary
print("Animal Legs Dictionary:", animal_legs)

# Task 1.3: Loop through the dictionary and print animals and their legs, then sum the legs
animal_legs = {
    'parrot': 2,
    'goat': 4,
    'spider': 8,
    'crab': 10
}

# Initialize a variable to store the total number of legs
total_legs = 0

# Loop through the dictionary and print the animals with their corresponding legs
for animal, legs in animal_legs.items():
    print(f"The {animal} has {legs} legs.")
    total_legs += legs  # Add the number of legs to the total

# Print the total number of legs
print(f"Total number of legs: {total_legs}")

# Task 1.4: Create a tuple and change the value in the list inside it
A = (3, 9, 4, [5, 6])  # Tuple containing a list

# Changing the value in the list from 5 to 8
A[3][0] = 8  # Accessing the list inside the tuple and modifying its first element

# Print the modified tuple
print("Modified tuple:", A)

# Task 1.5: Delete the tuple
A = (3, 9, 4, [5, 6])  # Define the tuple

# Deleting the tuple A
del A

# Trying to print the tuple after deletion (this will cause an error if uncommented)
# print(A)  # This will raise a NameError because A has been deleted

# Task 1.6: Create a tuple and count the occurrences of 'p'
B = ('a', 'p', 'p', 'l', 'e')  # Define the tuple

# Count the number of occurrences of 'p'
p_count = B.count('p')

# Print the result
print("The number of occurrences of 'p':", p_count)

# Find the index of 'l'
l_index = B.index('l')

# Print the result
print("The index of 'l' in the tuple:", l_index)

import numpy as np  # Importing the numpy library

# Task 2.1: Convert matrix A into a NumPy array
A = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12]
]  # Define the matrix A as a list of lists

# Convert the matrix into a NumPy array
A_np = np.array(A)

# Print the NumPy array
print("Matrix A as a NumPy array:\n", A_np)

# Task 2.2: Slice the first 2 rows and columns 1 and 2
b = A_np[:2, :2]  # First 2 rows and first 2 columns

# Print the resulting subarray
print("Subarray b (first 2 rows and columns 1 and 2):\n", b)

# Task 2.3: Create an empty matrix 'C' with the same shape as 'A'
C = np.empty_like(A_np)  # Create an empty matrix with the same shape and type as 'A'

# Print the empty matrix C
print("Empty matrix C with the same shape as A:\n", C)

z = np.array([1, 0, 1])  # Define vector z

# Task 2.4: Add the vector z to each column of matrix A using an explicit loop and store the result in C
C = np.empty_like(A_np)  # Create an empty matrix C with the same shape as A

# Loop through each column and add vector z to it
for i in range(A_np.shape[1]):  # Loop over the number of columns
    C[:, i] = A_np[:, i] + z  # Add z to each column of A

# Print the result
print("Matrix C after adding vector z to each column of A:\n", C)

# Define matrices X and Y
X = np.array([[1, 2], [3, 4]])
Y = np.array([[5, 6], [7, 8]])

# Task 2.5: Add the matrices X and Y
result = X + Y  # Element-wise addition of X and Y

# Print the result
print("The sum of matrices X and Y:\n", result)

# Define matrices X and Y
X = np.array([[1, 2], [3, 4]])
Y = np.array([[5, 6], [7, 8]])

# Task 2.6: Multiply the matrices X and Y (matrix multiplication)
result = np.dot(X, Y)  # Matrix multiplication of X and Y

# Print the result
print("The product of matrices X and Y:\n", result)

# Define matrix Y
Y = np.array([[5, 6], [7, 8]])

# Task 2.7: Compute and print the element-wise square root of matrix Y
sqrt_Y = np.sqrt(Y)  # Element-wise square root of Y

# Print the result
print("Element-wise square root of matrix Y:\n", sqrt_Y)

# Define matrix X and vector v
X = np.array([[1, 2], [3, 4]])
v = np.array([9, 10])

# Task 2.8: Compute and print the dot product of matrix X and vector v
dot_product = np.dot(X, v)  # Dot product of matrix X and vector v

# Print the result
print("The dot product of matrix X and vector v:\n", dot_product)

# Define matrix X
X = np.array([[1, 2], [3, 4]])

# Task 2.9: Compute and print the sum of each column of X
column_sum = np.sum(X, axis=0)  # Sum along columns (axis=0)

# Print the result
print("The sum of each column of matrix X:\n", column_sum)

# Task 3.1: Create a function 'Compute' to calculate velocity
def Compute(distance, time):
    if time != 0:
        velocity = distance / time  # Calculate velocity as distance divided by time
        return velocity
    else:
        return "Time cannot be zero!"  # Handle division by zero

# Example usage of the Compute function
distance = 100  # Example distance in meters
time = 15       # Example time in seconds

velocity = Compute(distance, time)

# Print the calculated velocity
print("Velocity:", velocity, "m/s")

# Task 3.2: Create a list of even numbers and a function to calculate the product

# Create a list of even numbers up to 12
even_num = [2, 4, 6, 8, 10, 12]

# Define the function 'mult' to calculate the product of all entries in the list
def mult(numbers):
    product = 1  # Start with 1 as the multiplicative identity
    for num in numbers:
        product *= num  # Multiply each number to the product
    return product

# Call the function and calculate the product of the list 'even_num'
result = mult(even_num)

# Print the result
print("The product of all even numbers:", result)

import pandas as pd
# Create a Pandas DataFrame
data = {
    'C1': [1, 2, 3, 5, 5],
    'C2': [6, 7, 5, 4, 8],
    'C3': [7, 9, 8, 6, 5],
    'C4': [7, 5, 2, 8, 8]
}

df = pd.DataFrame(data)  # Create DataFrame from the data

# Task 4.1: Print the first two rows of the DataFrame
print("First two rows of the DataFrame:\n", df.head(2))

# Task 4.2: Print the second column of the DataFrame
second_column = df['C2']  # Access the second column by its name
print("Second column (C2) of the DataFrame:\n", second_column)

# Task 4.3: Rename the third column 'C3' to 'B3'
df.rename(columns={'C3': 'B3'}, inplace=True)

# Print the updated DataFrame
print("DataFrame after renaming 'C3' to 'B3':\n", df)

# Task 4.4: Add a new column to the DataFrame and name it 'Sum'
df['Sum'] = df.sum(axis=1)  # Sum each row and store it in the new 'Sum' column

# Print the updated DataFrame
print("DataFrame after adding the 'Sum' column:\n", df)

# Task 4.5: Sum the entries of each row and add the result in the 'Sum' column
df['Sum2'] = df[['C1', 'C2', 'B3', 'C4']].sum(axis=1)  # Sum the entries of each row

# Print the updated DataFrame
print("DataFrame after summing the entries of each row:\n", df)

# Task 4.6: Read the CSV file 'hello_sample.csv' into a Pandas DataFrame
df_csv = pd.read_csv('hello_sample.csv')  # Replace with the correct path to your CSV file

# Print the DataFrame
print("DataFrame from 'hello_sample.csv':\n", df_csv)

#Task 4.7

# Print the complete DataFrame
print("Complete DataFrame from 'hello_sample.csv':\n", df_csv)

#Task 4.8
# Print the bottom 2 records of the DataFrame
print("Bottom 2 records of the DataFrame:\n", df_csv.tail(2))

#Task 4.9
# Print information about the DataFrame
print("Information about the DataFrame:")
df_csv.info()

#Task 4.10
# Print the shape of the DataFrame
print("Shape of the DataFrame (rows, columns):", df_csv.shape)

#Task 4.11
# Sort the DataFrame using the 'Weight' column
df_sorted = df_csv.sort_values(by='Weight')

# Print the sorted DataFrame
print("DataFrame sorted by 'Weight':\n", df_sorted)

#Task 4.12
# Check for null values using isnull()
null_check = df_csv.isnull()

# Use dropna() to remove rows with any missing values
df_no_na = df_csv.dropna()

# Print the results
print("Null value check (True indicates missing values):\n", null_check)
print("\nDataFrame after dropping rows with missing values:\n", df_no_na)

#Task 4.12
# Check for null values using isnull()
null_check = df_csv.isnull()

# Use dropna() to remove rows with any missing values
df_no_na = df_csv.dropna()

# Print the results
print("Null value check (True indicates missing values):\n", null_check)
print("\nDataFrame after dropping rows with missing values:\n", df_no_na)